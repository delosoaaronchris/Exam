@model RecyclingApp.Models.HomeViewModel

@{
    ViewBag.Title = "Home";
}

<h2>Create Recyclable Type</h2>
@using (Html.BeginForm("CreateRecyclableType", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        @Html.LabelFor(model => model.NewRecyclableType.Type, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NewRecyclableType.Type, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NewRecyclableType.Type, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NewRecyclableType.Rate, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NewRecyclableType.Rate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NewRecyclableType.Rate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NewRecyclableType.MinKg, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NewRecyclableType.MinKg, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NewRecyclableType.MinKg, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NewRecyclableType.MaxKg, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NewRecyclableType.MaxKg, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NewRecyclableType.MaxKg, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
}

<h2>Create Recyclable Item</h2>
@using (Html.BeginForm("CreateRecyclableItem", "Home", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        @Html.LabelFor(model => model.NewRecyclableItem.RecyclableTypeId, "Recyclable Type", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.NewRecyclableItem.RecyclableTypeId, new SelectList(Model.RecyclableTypes, "Id", "Type"), new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.NewRecyclableItem.RecyclableTypeId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NewRecyclableItem.Weight, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NewRecyclableItem.Weight, new { htmlAttributes = new { @class = "form-control", onchange = "calculateRate()" } })
            @Html.ValidationMessageFor(model => model.NewRecyclableItem.Weight, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.NewRecyclableItem.ComputedRate, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <span id="computedRate"></span>
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.NewRecyclableItem.ItemDescription, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NewRecyclableItem.ItemDescription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NewRecyclableItem.ItemDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>

    //working but not showing the label
    @*    <script>
            function calculateRate() {
                var weight = parseFloat($('#NewRecyclableItem_Weight').val());
                var rateText = $('#NewRecyclableItem_RecyclableTypeId option:selected').text();
                var rate = parseFloat(rateText.split(' - ')[1]);

                if (!isNaN(weight) && !isNaN(rate)) {
                    var computedRate = weight * rate;
                    $('#computedRate').text(computedRate.toFixed(2));
                } else {
                    $('#computedRate').text('N/A');
                }
            }
        </script>*@
    //wrong label
    @*<script>
            function calculateRate() {
                console.log("calculateRate function called.");

                var weight = parseFloat($('#NewRecyclableItem_Weight').val());
                console.log("Weight:", weight);

                var rateText = $('#NewRecyclableItem_RecyclableTypeId option:selected').text();
                var rate = parseFloat(rateText.split(' ')[1]); // Adjusted to handle the format "type 5"

                console.log("Rate:", rate);

                if (!isNaN(weight) && !isNaN(rate)) {
                    var computedRate = weight * rate;
                    $('#computedRate').text('Computed Rate: ' + computedRate.toFixed(2));
                } else {
                    $('#computedRate').text('Computed Rate: N/A');
                }
            }
        </script>*@
    // the most close one
@*    <script>
         function calculateRate() {
            console.log("calculateRate function called.");

            var weight = parseFloat($('#NewRecyclableItem_Weight').val());
            console.log("Weight:", weight);

            var rateText = $('#NewRecyclableItem_RecyclableTypeId option:selected').text();
            var rate = parseFloat(rateText.split(' ')[1]); // Adjusted to handle the format "type 5"

            console.log("Rate:", rate);

            if (!isNaN(weight) && !isNaN(rate)) {
                var computedRate = weight * rate;
                $('#computedRate').text('Computed Rate: ' + computedRate.toFixed(2));
            } else {
                $('#computedRate').text('Computed Rate: N/A');
            }

        } 
    </script>*@
    <script>

        //start
@*        function getRate() {
            var rateText = $('#NewRecyclableItem_RecyclableTypeId option:selected').text();
            var rate = parseFloat(rateText.split(' ')[1]); // Extract the rate from the dropdown text
            return rate;
        }*@

        function getRate() {
            var selectedOption = $('#NewRecyclableItem_RecyclableTypeId option:selected');
            console.log("Selected Option:", selectedOption); // Log the selected option for debugging
            var rateText = selectedOption.text();

            
            console.log("Rate Text:", rateText); // Log the rate text for debugging
            var rate = parseFloat(rateText.split(' ')[1]); // Extract the rate from the dropdown text
            console.log("Extracted Rate:", rate); // Log the extracted rate for debugging
            return rate;

        }


        function getWeight() {
            return parseFloat($('#NewRecyclableItem_Weight').val());
        }

        function calculateRate() {
            var weight = getWeight(); // Call the function to get the weight
            var rate = getRate(); // Call the function to get the rate
            var computedRate = weight * rate;

            $('#computedRate').text('Computed Rate: ' + computedRate.toFixed(2));
            $('#rateLabel').text('Rate: ' + rate); // Set the rate label
        }
        //end


    </script>




}
